// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String
  employeeId String
  name       String?
  password   String
  role       Int
  user_avt   String    @default("https://res.cloudinary.com/dig0nsb6m/image/upload/v1704869331/hjv353yrt9hahuomkxey.png")
  isBan      Boolean   @default(false)
  banUntil   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDelete   Boolean   @default(false)
  // Postion    Position  @relation(fields: [role], references: [id])

  Feedback        Feedback[]
  ActualQuantity  ActualQuantity[]
  maintenancePlan maintenancePlan[]
}

// model Position {
//   id   Int    @id @default(autoincrement())
//   name String
//   User User[]
// }

model VerifyCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      Int
  createdAt DateTime @default(now())
}

model Feedback {
  id          Int      @id @default(autoincrement())
  description String
  time        Int?
  createdAt   DateTime @default(now())

  User   User @relation(fields: [userId], references: [id])
  userId Int
}

model Deparment {
  id            Int    @id @default(autoincrement())
  deparmentName String
  symbol        String
  rooms         Room[]
}

model Room {
  id               Int                @id @default(autoincrement())
  roomName         String
  deparmentId      Int
  createAt         DateTime           @default(now())
  deparment        Deparment          @relation(fields: [deparmentId], references: [id], onDelete: Cascade)
  Device           Device[]
  oldHistories     RotationDevice[]   @relation("OldRoom")
  newHistories     RotationDevice[]   @relation("NewRoom")
  UsageInformation UsageInformation[]
}

model Device {
  id                    Int                     @id @default(autoincrement())
  name                  String
  serialNumber          String
  manufacturer          String
  purchaseDate          DateTime
  expirationDate        DateTime
  price                 Decimal
  qrCode                String?
  image                 String                  @default("https://res.cloudinary.com/dig0nsb6m/image/upload/v1704869331/hjv353yrt9hahuomkxey.png")
  lastMaintenanceDate   DateTime?
  statusDevice          String                  @default("INACTIVE")
  categoryId            Int
  roomId                Int?
  isDelete              Boolean                 @default(false)
  room                  Room?                   @relation(fields: [roomId], references: [id])
  category              Category                @relation(fields: [categoryId], references: [id])
  UsageInformation      UsageInformation[]
  RotationDevice        RotationDevice[]
  maintenancePlan       maintenancePlan[]
  DeviceAttributeValues DeviceAttributeValues[]

  @@map("device")
}

model Category {
  id                  Int                   @id @default(autoincrement())
  categoryName        String
  description         String?
  devices             Device[]
  AttribyutesCategory AttribyutesCategory[]

  @@map("category")
}

model AttribyutesCategory {
  id                    Int                     @id @default(autoincrement())
  name                  String
  categoryId            Int
  Category              Category                @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  DeviceAttributeValues DeviceAttributeValues[]

  @@map("attribute_category")
}

model DeviceAttributeValues {
  id                  Int                 @id @default(autoincrement())
  deviceId            Int
  attributeId         Int
  value               String
  Device              Device              @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  AttribyutesCategory AttribyutesCategory @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@map("device_attribute_values")
}

model UsageInformation {
  id          Int       @id @default(autoincrement())
  deviceId    Int
  usage_start DateTime  @default(now())
  usage_end   DateTime
  end         DateTime?
  purpose     String?
  isDeleted   Boolean   @default(false)
  roomId      Int
  room        Room      @relation(fields: [roomId], references: [id])
  Device      Device    @relation(fields: [deviceId], references: [id])
}

model RotationDevice {
  id            Int      @id @default(autoincrement())
  deviceId      Int
  oldLocationId Int
  newLocationId Int
  reason        String
  transferDate  DateTime @default(now())
  Device        Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  OldRoom       Room     @relation("OldRoom", fields: [oldLocationId], references: [id], onDelete: Cascade)
  NewRoom       Room     @relation("NewRoom", fields: [newLocationId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notification")
}

enum StatusMaintenance {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
}

model maintenancePlan {
  id                Int               @id @default(autoincrement())
  deviceId          Int
  userId            Int
  requestDate       DateTime
  startDate         DateTime
  endDate           Int
  priority          PriorityLevel     @default(LOW)
  maintenanceStatus StatusMaintenance @default(PENDING)
  descriptionPlan   String?
  User              User              @relation(fields: [userId], references: [id])
  Device            Device            @relation(fields: [deviceId], references: [id])
}

model ListMaterials {
  id       Int        @id @default(autoincrement())
  name     String
  Material Material[]
}

model Material {
  id             Int              @id @default(autoincrement())
  name           String
  isDelete       Boolean          @default(false)
  quantity       Int?             @default(0)
  note           String?
  image          String           @default("https://res.cloudinary.com/dnhndgzes/image/upload/v1728122320/frdlrynketnd07okysmg.png")
  categoryId     Int
  ListMaterials  ListMaterials    @relation(fields: [categoryId], references: [id])
  OrderItem      OrderItem[]
  Waste          Waste[]
  ActualQuantity ActualQuantity[]
}

model Waste {
  id          Int      @id @default(autoincrement())
  wasteReason String?
  wasteCode   String
  materialId  Int
  quantity    Int
  createdAt   DateTime @default(now())
  material    Material @relation(fields: [materialId], references: [id])
}

model ActualQuantity {
  id         Int      @id @default(autoincrement())
  materialId Int
  quantity   Int
  createdAt  DateTime @default(now())
  userId     Int
  User       User     @relation(fields: [userId], references: [id])
  Material   Material @relation(fields: [materialId], references: [id])
}

enum OrderStatus {
  QUEUE
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ActivityType {
  EX
  IN
}

model Order {
  id           Int          @id @default(autoincrement())
  orderCode    String       @unique
  source       String
  notes        String?
  activityType ActivityType
  orderDate    DateTime     @default(now())
  orderDateEnd DateTime?
  orderStatus  OrderStatus  @default(QUEUE)
  totalAmount  Float        @default(0)
  orderItems   OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  material   Material @relation(fields: [materialId], references: [id])
  materialId Int
  quantity   Int
  price      Float
  totalPrice Float    @default(0)
}

// model CategoryAttribyutes {
//   categoryId   Int
//   attribyuteId Int

//   category   Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   attribyute Attribyutes_category @relation(fields: [attribyuteId], references: [id], onDelete: Cascade)

//   @@id([categoryId, attribyuteId])
//   @@map("category_attribyutes")
// }
